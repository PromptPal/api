name: Build and Release

on:
  push:
    branches-ignore: [main]

permissions:
  contents: write # to create release commit (google-github-actions/release-please-action)
  pull-requests: write # to create release PR (google-github-actions/release-please-action)

jobs:
  build:
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: db_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: rust
      - uses: actions/checkout@v4
      - uses: hecrj/setup-rust-action@v2
        with:
          rust-version: stable
      - name: Run tests
        run: cargo test
        env:
          CARGO_INCREMENTAL: "0"
          RUSTFLAGS: "-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests"
          RUSTDOCFLAGS: "-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests"
      - name: rust-grcov
        # You may pin to the exact commit or the version.
        # uses: actions-rs/grcov@bb47b1ed7883a1502fa6875d562727ace2511248
        uses: actions-rs/grcov@v0.1
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      # - name: setup env
      #   run: |
      #     echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
      #     echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      #   shell: bash
      # - name: Generate
      #   run: |
      #     echo "GH_TAG=$(echo $GITHUB_REF | awk -F / '{print $3}')" >> $GITHUB_ENV
      #     go install github.com/vektra/mockery/v2@v2.42.0
      #     go generate ./...
      # - name: Test
      #   env:
      #     DB_TYPE: "postgres"
      #     DB_DSN: "host=127.0.0.1 user=postgres password=postgres port=5432 dbname=db_test sslmode=disable"
      #   run: go test -race -coverprofile=coverage.txt -covermode=atomic ./...
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v4
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      # - name: Build
      #   if: ${{ steps.release.outputs.release_created }}
      #   env:
      #     GOARCH: amd64
      #     CGO_ENABLED: 0
      #     GOOS: linux
      #   run: |
      #     make release
      #     chmod +x up-pp-api

      # - uses: dsaltares/fetch-gh-release-asset@master
      #   if: ${{ steps.release.outputs.release_created }}
      #   with:
      #     repo: "PromptPal/web"
      #     file: "dist.zip"
      #     target: "dist.zip"
      #     token: ${{ secrets.GH_PERSONAL_TOKEN }}
      # - uses: montudor/action-zip@v1
      #   if: ${{ steps.release.outputs.release_created }}
      #   with:
      #     args: unzip -qq dist.zip -d public
      # - name: Extract metadata (tags, labels) for Docker
      #   id: meta
      #   uses: docker/metadata-action@v5
      #   if: ${{ steps.release.outputs.release_created }}
      #   with:
      #     images: annatarhe/prompt-pal
      #     tags: ${{ steps.release.outputs.tag_name }}
      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v3
      #   if: ${{ steps.release.outputs.release_created }}
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}
      # - name: Build and push Docker image
      #   uses: docker/build-push-action@v5
      #   if: ${{ steps.release.outputs.release_created }}
      #   with:
      #     context: .
      #     file: ./Dockerfile
      #     push: ${{ github.event_name != 'pull_request' && steps.release.outputs.release_created }}
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}
